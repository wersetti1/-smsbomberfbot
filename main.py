import phonenumbers
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import string
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import random
from pyqiwip2p import QiwiP2P
import traceback
from os import getenv
import requests
import threading
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import BoundFilter
import asyncio, json, os, random, datetime
from pyqiwip2p import QiwiP2P
import pytz
from keyboards import *
from bomber import bomber_active, call_bomber, sms_bomber

from db import *
from cfg import *
from states import *


p2p = QiwiP2P(auth_key=QIWI_PRIV_KEY)


class IsAdmin(BoundFilter):
    async def check(self, message: types.Message):
        try:
            if message.from_user.id == admin_id:
                return True
            else:
                return False
        except:
            return False


class IsBanned(BoundFilter):
    async def check(self, message: types.Message):
        try:
            state = get_bans(message.from_user.id)
            if state == None:
                return True
            else:
                return False
        except:
            return False


bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())


async def send_profile(userid, _type, _message_id):
    user = get_profile(userid)
    ##registration
    now = datetime.datetime.now().strftime("%d.%m.%Y %S:%M:%H")
    diff = datetime.datetime.strptime(
        now, "%d.%m.%Y %S:%M:%H"
    ) - datetime.datetime.strptime(user[4], "%d.%m.%Y %S:%M:%H")
    ##registration
    sub = user[3]
    if sub != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        if (
            datetime.datetime.strptime(sub, "%d.%m.%Y %S:%M:%H")
            < datetime.datetime.now()
        ):
            set_default_sub(userid)
            user = get_profile(userid)
            sub = user[3]
        sub_diff = (
            datetime.datetime.strptime(sub, "%d.%m.%Y %S:%M:%H")
            - datetime.datetime.now()
        )

        if sub_diff.days > 0:
            sub = f"{sub_diff.days} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"
        elif sub_diff.days == 0:
            sub = f"{int(sub_diff.seconds / 3600)} —á–∞—Å–æ–≤ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"
    rang = get_rang(user[5])
    if _type == "message":
        await bot.send_message(
            userid,
            f"<b>üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è </i>\n\nüí¨ ID: <code>{userid}</code>\nüí¨ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥</code>\n\nü•Ä –ü–æ–¥–ø–∏—Å–∫–∞: <code>{sub}</code>\nüí∞ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å: <code>{float(user[2])} ‚ÇΩ</code>\n\n‚öúÔ∏è –¢–≤–æ–π —Ä–∞–Ω–≥: <code>{user[5]}</code>\nüìû –°–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç–æ: <code>{user[6]} –∏–∑ {rang[1]}</code>\n‚öôÔ∏è –õ–∏–º–∏—Ç –∑–∞–¥–∞—á –≤ —Å—É—Ç–∫–∏: <code>{user[7]} –∏–∑ {rang[2]}</code>\nü§ç –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: <code>{user[8]} –∏–∑ {rang[3]}</code>",
            reply_markup=profile_kb(),
            parse_mode="HTML",
        )
    elif _type == "callback":
        await bot.edit_message_text(
            f"<b>üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>\n\nüí¨ ID: <code>{userid}</code>\nüí¨ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥</code>\n\nü•Ä –ü–æ–¥–ø–∏—Å–∫–∞: <code>{sub}</code>\nüí∞ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å: <code>{float(user[2])} ‚ÇΩ</code>\n\n‚öúÔ∏è –¢–≤–æ–π —Ä–∞–Ω–≥: <code>{user[5]}</code>\nüìû –°–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç–æ: <code>{user[6]} –∏–∑ {rang[1]}</code>\n‚öôÔ∏è –õ–∏–º–∏—Ç –∑–∞–¥–∞—á –≤ —Å—É—Ç–∫–∏: <code>{user[7]} –∏–∑ {rang[2]}</code>\nü§ç –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: <code>{user[8]} –∏–∑ {rang[3]}</code>",
            chat_id=userid,
            message_id=_message_id,
            reply_markup=profile_kb(),
            parse_mode="HTML",
        )


@dp.message_handler(IsAdmin(), commands=["admin"])
async def admin(message: types.Message):
    await message.answer(
        "<b>admin panel</b>", parse_mode="HTML", reply_markup=admin_kb()
    )


@dp.message_handler(IsBanned(), commands=["start"])
async def start(message: types.Message):
    is_reg = False
    try:
        user = get_profile(message.from_user.id)
        is_reg = True
    except:
        pass
    db_insert(
        message.from_user.id,
        message.from_user.username,
        datetime.datetime.now().strftime("%d.%m.%Y %S:%M:%H"),
    )
    if message.text == "/start":
        pass
    else:
        if is_reg == False and str(message.from_user.id) != message.text.split("=")[1]:
            set_referal(message.text.split("=")[1])
        else:
            pass

    await message.answer_sticker(
        r"CAACAgIAAxkBAAEFT71i1jfbiA51Mxtmxb9iUjTY5R4PuAACWzoAAuCjggfPhzDKe5UdFykE"
    )
    await message.answer(start_text, parse_mode="HTML", reply_markup=start_kb())


@dp.message_handler(IsAdmin(), state=FMSAdmin.get_promo_amount)
async def promo_create(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.delete()
    if message.text.isdigit() == False:
        await bot.edit_message_text(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            message.from_user.id,
            data["message_id"],
            reply_markup=back_admin_menu(),
        )
        return FMSAdmin.get_promo_amount.set()
    all_promos = ""
    if data["item"].split("|")[0] == "sub":
        if data["item"].split("|")[1] == "hour":
            sub_text = "1 hour"
        else:
            subs = {
                "day": "1 day",
                "week": "7 day",
                "month": "30 day",
                "one_and_half_month": "90 day",
                "half_year": "180 day",
                "year": "365 day",
            }
            sub_text = subs[data["item"].split("|")[1]]
        for i in range(int(message.text)):
            characters = list(string.ascii_letters + string.digits)
            random.shuffle(characters)
            promo = []
            for i in range(6):
                promo.append(random.choice(characters))
            promo = "".join(promo)
            add_promo(promo, "–ø–æ–¥–ø–∏—Å–∫–∞", sub_text)
            all_promos += f"<code>{promo}</code>\n"
        await bot.edit_message_text(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ {message.text} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å–ø–∏—Å–æ–∫:\n{all_promos}",
            message.from_user.id,
            data["message_id"],
            reply_markup=back_admin_menu(),
            parse_mode="HTML",
        )
    else:
        for i in range(int(message.text)):
            characters = list(string.ascii_letters + string.digits)
            random.shuffle(characters)
            promo = []
            for i in range(6):
                promo.append(random.choice(characters))
            promo = "".join(promo)
            add_promo(promo, f'—Ä–∞–Ω–≥|{data["item"].split("|")[1]}', "None")
            all_promos += f"<code>{promo}</code>\n"
        await bot.edit_message_text(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ {message.text} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å–ø–∏—Å–æ–∫:\n{all_promos}",
            message.from_user.id,
            data["message_id"],
            reply_markup=back_admin_menu(),
            parse_mode="HTML",
        )

    await state.finish()


@dp.message_handler(IsAdmin(), state=FMSAdmin.get_mailing_text)
async def mailing_start(message: types.Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    await bot.edit_message_text(
        "<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...</b>",
        message.from_user.id,
        data["message_id"],
        parse_mode="HTML",
        reply_markup=back_admin_menu(),
    )
    await state.finish()
    asyncio.create_task(send_message_to_user(message.html_text, message.from_user.id))


@dp.message_handler(IsAdmin(), state=FMSAdmin.get_userid_unban)
async def unban_user(message: types.Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    try:
        unban(message.text)
        await bot.send_message(message.text, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å")
    except:
        pass
    await bot.edit_message_text(
        f"–í—ã —Ä–∞–∑–±–∞–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{message.text}</code>",
        message.from_user.id,
        data["message_id"],
        parse_mode="HTML",
        reply_markup=back_admin_menu(),
    )
    await state.finish()


@dp.message_handler(IsAdmin(), state=FMSAdmin.get_reason_ban)
async def ban_reason(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    data = await state.get_data()
    ban(
        data["userid"],
        message.text,
        datetime.datetime.now().strftime("%d.%m.%Y %S:%M:%H"),
    )
    await bot.edit_message_text(
        f'–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{data["userid"]}</code> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <code>{message.text}</code>',
        message.from_user.id,
        data["message_id"],
        reply_markup=back_admin_menu(),
        parse_mode="HTML",
    )
    try:
        await bot.send_message(
            data["userid"],
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {message.text}",
        )
    except:
        pass
    await state.finish()


@dp.message_handler(IsAdmin(), state=FMSAdmin.get_userid_ban)
async def ban_userid(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    async with state.proxy() as data:
        data["userid"] = message.text
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
        message.from_user.id,
        data["message_id"],
        reply_markup=back_admin_menu(),
    )
    await FMSAdmin.get_reason_ban.set()


@dp.message_handler(IsAdmin(), state=FMSAdmin.get_userid_watch_profile)
async def watch_profile(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    data = await state.get_data()
    try:
        await send_profile(message.from_user.id, "message", data["message_id"])
    except:
        await bot.edit_message_text(
            "<b>–û—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>",
            message.from_user.id,
            data["message_id"],
            reply_markup=back_admin_menu(),
            parse_mode="HTML",
        )
    await state.finish()


@dp.message_handler(IsAdmin(), state=FMSAdmin.get_amount_set_balance)
async def set_balance_amount(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    data = await state.get_data()
    if message.text.isdigit() == False and message.text[0] != "-":
        await bot.edit_message_text(
            "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
            message.from_user.id,
            data["message_id"],
            reply_markup=back_admin_menu(),
        )
        return FMSAdmin.get_amount_set_balance.set()
    try:
        buy_set_balance(data["userid"], float(message.text))
    except:
        pass
    await bot.edit_message_text(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{data['userid']}</code> –Ω–∞ –±–∞–ª–∞–Ω—Å <code>{float(message.text)} ‚ÇΩ</code>",
        message.from_user.id,
        data["message_id"],
        reply_markup=back_admin_menu(),
        parse_mode="HTML",
    )
    await state.finish()


@dp.message_handler(IsAdmin(), state=FMSAdmin.get_userid_set_balance)
async def set_balance_id(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    async with state.proxy() as data:
        data["userid"] = message.text
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        message.from_user.id,
        data["message_id"],
        reply_markup=back_admin_menu(),
        parse_mode="HTML",
    )
    await FMSAdmin.get_amount_set_balance.set()


@dp.message_handler(state=FSMMain.get_check_number)
async def check_number(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    data = await state.get_data()
    keyboard = InlineKeyboardMarkup()
    kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
    keyboard.add(kb)
    try:
        phone_num = message.text
        if phone_num[1] != "+" and phone_num[1].isdigit() == True:
            phone_num = f"+{message.text}"
        my_number = phonenumbers.parse(phone_num)
        number = check_phone(f"{my_number.country_code}{my_number.national_number}")
        if number == []:
            await bot.edit_message_text(
                f"""<b>‚ùî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä</b>
<i>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</i>

<code>üìû +{my_number.country_code}{my_number.national_number}</code>
–§–ª—É–¥ –Ω–∏ —Ä–∞–∑—É –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
    """,
                message.from_user.id,
                data["message_id"],
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            await bot.edit_message_text(
                f"""<b>‚ùî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä</b>
<i>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</i>

<code>üìû +{my_number.country_code}{my_number.national_number}</code>
–§–ª—É–¥ –∑–∞–ø—É—Å–∫–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    """,
                message.from_user.id,
                data["message_id"],
                parse_mode="HTML",
                reply_markup=keyboard,
            )
    except:
        await bot.edit_message_text(
            """<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>
<i>–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤—ë–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>""",
            message.from_user.id,
            data["message_id"],
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    await state.finish()


@dp.message_handler(state=FSMMain.get_phone_bomber)
async def bomber_start(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(row_width=1)
    try:
        phone_num = message.text
        if phone_num[1] != "+" and phone_num[1].isdigit() == True:
            phone_num = f"+{message.text}"
        my_number = phonenumbers.parse(phone_num)
        number = get_whitelist(f"{my_number.country_code}{my_number.national_number}")
        if number != None:
            if int(number[0]) != message.from_user.id:
                kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
                keyboard.add(kb)
                await bot.edit_message_text(
                    "<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –Ω–∞ –Ω–µ–≥–æ –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–ª—É–¥ —Å –Ω–∞—à–µ–≥–æ –±–æ–º–±–µ—Ä–∞.</i>",
                    message.from_user.id,
                    data["message_id"],
                    parse_mode="HTML",
                    reply_markup=keyboard,
                )
                await state.finish()
                return
        characters = list(string.ascii_letters + string.digits)
        random.shuffle(characters)
        task_id = []
        for i in range(6):
            task_id.append(random.choice(characters))
        task_id = "".join(task_id)
        kb = InlineKeyboardButton(
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å",
            callback_data=f"bomber_start|{task_id}",
        )
        kb1 = InlineKeyboardButton(
            text="‚Ü™Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"bomber_cancel|{task_id}"
        )
        bomber_start_insert(
            message.from_user.id,
            data["tag"],
            data["bomber_type"],
            data["bomber_mode"],
            f"{my_number.country_code}{my_number.national_number}",
            data["work_time"],
            task_id,
        )
        keyboard.add(kb, kb1)
        work_time_text = f"{data['work_time']} –º–∏–Ω—É—Ç"
        await bot.edit_message_text(
            f"<b>{data['tag']}</b>\n‚îú –¢–∏–ø:  <code>{data['bomber_type']}</code>\n‚îú –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:  <code>{data['bomber_mode']}</code>\n‚îú –ù–æ–º–µ—Ä:  <code>{my_number.country_code}{my_number.national_number}</code>\n‚îÇ\n‚îî –ú–∞–∫—Å. –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:  <code>{work_time_text if data['tag'] == 'ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥' else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}</code>\n\n<i>‚ùî –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)</i>",
            message.from_user.id,
            data["message_id"],
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    except:
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
        keyboard.add(kb)
        await bot.edit_message_text(
            """<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>
<i>–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤—ë–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑</i>""",
            message.from_user.id,
            data["message_id"],
            parse_mode="HTML",
            reply_markup=keyboard,
        )


@dp.message_handler(state=FSMMain.get_requisites)
async def withdraw_request(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    data = await state.get_data()
    await bot.edit_message_text(
        f"<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n<i>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</i>\n\n–í–∞—à ID: <code>{message.from_user.id}</code>\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <code>100.00 ‚ÇΩ</code>\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{message.text}</code>\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <code>{datetime.datetime.today().strftime('%d.%m.%Y %H:%M:%S')}</code>",
        message.from_user.id,
        data["message_id"],
        parse_mode="HTML",
        reply_markup=withdraw_request_kb(100),
    )
    await state.finish()


@dp.message_handler(state=FSMMain.get_whitelist_number)
async def whitelist_add(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    data = await state.get_data()
    keyboard = InlineKeyboardMarkup()
    kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
    keyboard.add(kb)
    try:
        phone_num = message.text
        if phone_num[1] != "+" and phone_num[1].isdigit() == True:
            phone_num = f"+{message.text}"
        my_number = phonenumbers.parse(phone_num)
        number = get_whitelist(f"{my_number.country_code}{my_number.national_number}")
        if number == None:
            await bot.edit_message_text(
                f"""<b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä</b>
    <i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</i>
    <code>üìû +{my_number.country_code}{my_number.national_number}</code>
    """,
                message.from_user.id,
                data["message_id"],
                parse_mode="HTML",
                reply_markup=keyboard,
            )
            whitelist_add_db(
                message.from_user.id,
                f"{my_number.country_code}{my_number.national_number}",
            )
        else:
            await bot.edit_message_text(
                f"""<b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä</b>
    <i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ</i>
    <code>üìû +{my_number.country_code}{my_number.national_number}</code>
    """,
                message.from_user.id,
                data["message_id"],
                parse_mode="HTML",
                reply_markup=keyboard,
            )
    except:
        await bot.edit_message_text(
            """<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>
<i>–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤—ë–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>""",
            message.from_user.id,
            data["message_id"],
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    await state.finish()


@dp.message_handler(state=FSMMain.get_promo)
async def promo_activate(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, message.message_id)
    keyboard = InlineKeyboardMarkup()
    kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
    keyboard.add(kb)
    try:
        promo = get_promo(message.text)
        if promo[1].startswith("–ø–æ–¥–ø–∏—Å–∫–∞"):
            if promo[2].split()[1] == "day":
                sub = datetime.datetime.now() + datetime.timedelta(
                    days=int(promo[2].split()[0])
                )
                set_sub(
                    message.from_user.id,
                    sub.strftime("%d.%m.%Y %S:%M:%H"),
                )
                promo_text = f"–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {promo[2].split()[0]} –¥–Ω–µ–π"
            elif promo[2].split()[1] == "hour":
                sub = datetime.datetime.now() + datetime.timedelta(
                    hours=int(promo[2].split()[0])
                )
                set_sub(
                    message.from_user.id,
                    sub.strftime("%d.%m.%Y %S:%M:%H"),
                )
                promo_text = f"–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {promo[2].split()[0]} —á–∞—Å–æ–≤"
        elif promo[1].startswith("—Ä–∞–Ω–≥"):
            rang = promo[1].split("|")[1]
            set_rang(message.from_user.id, rang)
            promo_text = f"—Ä–∞–Ω–≥ {rang}"
        await bot.edit_message_text(
            f"<b>üéü –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á</b>\n<i>–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: <code>{message.text}</code>.\n–ó–∞ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤—ã –ø–æ–ª—É—á–∏–ª–∏: <code>{promo_text}</code></i>",
            message.from_user.id,
            data["message_id"],
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    except:
        await bot.edit_message_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞, —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –ª–∏–±–æ –æ–Ω —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ",
            message.from_user.id,
            data["message_id"],
            reply_markup=keyboard,
        )
    await state.finish()


@dp.message_handler(state=FSMMain.get_balance_up_amount)
async def get_balance_up_amount(message: types.Message, state: FSMContext):
    await bot.delete_message(message.from_user.id, message.message_id)
    data = await state.get_data()
    if message.text.isdigit() == False:
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        keyboard.add(kb)
        await bot.edit_message_text(
            "<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n<i>–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</i>",
            message.from_user.id,
            data["message_id"],
            parse_mode="HTML",
            reply_markup=keyboard,
        )
        return await FSMMain.get_balance_up_amount.set()
    await bot.edit_message_text(
        f"<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–°—É–º–º–∞:  <code>{message.text}.00 ‚ÇΩ</code>\n\n<i>‚ùî –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>",
        message.from_user.id,
        data["message_id"],
        parse_mode="HTML",
        reply_markup=payment_system_choose(message.text),
    )
    await state.finish()


@dp.message_handler(
    IsBanned(),
    text=["üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", "‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí¨ –û —Å–µ—Ä–≤–∏—Å–µ", "üî• –ù–∞—á–∞—Ç—å"],
)
async def main_handler(message: types.Message):
    if message.text == "üî• –ù–∞—á–∞—Ç—å":
        await message.answer(
            """<b>üî• –ù–∞—á–∞—Ç—å</b>
<i>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

‚ùî –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–Ω–∏—Ü–µ –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Ñ–ª—É–¥–æ–º –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´FAQ/–ü–æ–º–æ—â—å¬ª</i>""",
            parse_mode="HTML",
            reply_markup=flood_type(),
        )
    elif message.text == "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç":
        await send_profile(message.from_user.id, "message", message.message_id)
    elif message.text == "‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = get_bot_stats()
        all_users = get_all_users()
        now = datetime.datetime.now().strftime("%d.%m.%Y")
        diff = datetime.datetime.strptime(now, "%d.%m.%Y") - datetime.datetime.strptime(
            stats[0], "%d.%m.%Y"
        )
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")
        keyboard.add(kb)
        await message.answer(
            f"<b>‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n<i>–û—Ç {stats[0]} ({diff.days} –¥–Ω–µ–π)</i>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(all_users)}</code>\nüìµ –ù–æ–º–µ—Ä–æ–≤ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ: <code>{stats[4]}</code>\nüì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:  <code>{stats[5]}</code>\nüìû –°–¥–µ–ª–∞–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: <code>{stats[6]}</code>",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    elif message.text == "üí¨ –û —Å–µ—Ä–≤–∏—Å–µ":
        stats = get_bot_stats()
        now = datetime.datetime.now().strftime("%d.%m.%Y")
        diff = datetime.datetime.strptime(now, "%d.%m.%Y") - datetime.datetime.strptime(
            stats[0], "%d.%m.%Y"
        )
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")
        keyboard.add(kb)
        await message.answer(
            f"""<b>üí¨ –û —Å–µ—Ä–≤–∏—Å–µ</b>
<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Å—ã–ª–∫–∏</i>

üí¨ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º/—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: {admin_username}
üí¨ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:  <code>{stats[0]} ({diff.days} –¥–Ω–µ–π)</code>

üí¨ –°–µ—Ä–≤–∏—Å–æ–≤ (–≤—Å–µ–≥–æ):  <code>{stats[1] + stats[2] + stats[3]} —Å–µ—Ä–≤–∏—Å–æ–≤</code>
‚îú SMS:  <code>{stats[1]} —Å–µ—Ä–≤–∏—Å–æ–≤</code>
‚îú –ê–≤—Ç–æ-–ó–≤–æ–Ω–∫–∏:  <code>{stats[2]} —Å–µ—Ä–≤–∏—Å–æ–≤</code>
‚îî –û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:  <code>{stats[3]} —Å–µ—Ä–≤–∏—Å–æ–≤</code>""",
            parse_mode="HTML",
            reply_markup=keyboard,
        )


@dp.callback_query_handler(IsBanned(), state="*")
async def callback_main(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "default_flood":
        user = get_profile(callback.from_user.id)
        now = datetime.datetime.now().strftime("%d.%m.%Y %S:%M:%H")
        if user[3] == "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            await callback.answer(
                "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True
            )
            await bot.answer_callback_query(callback.id)
            return
        elif datetime.datetime.strptime(
            user[3], "%d.%m.%Y %S:%M:%H"
        ) < datetime.datetime.strptime(now, "%d.%m.%Y %S:%M:%H"):
            set_default_sub(callback.from_user.id)
            await callback.answer(
                "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True
            )
            await bot.answer_callback_query(callback.id)
            return
        else:
            await bot.edit_message_text(
                """<b>ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥</b>
<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ñ–ª—É–¥–∞

‚ùî –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´FAQ/–ü–æ–º–æ—â—å¬ª</i>""",
                callback.from_user.id,
                callback.message.message_id,
                reply_markup=flood_type_kb("default"),
                parse_mode="HTML",
            )
    elif callback.data.startswith("sms_bomber"):
        if callback.data.split("|")[1] == "default":
            tag = "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥"
        elif callback.data.split("|")[1] == "infinity":
            tag = "‚ò†Ô∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ñ–ª—É–¥"
        await bot.edit_message_text(
            f"""<b>{tag}</b>\n‚îî –¢–∏–ø:  <code>üì® SMS</code>\n\n<i>‚ùî –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª-–≤–æ –ø–æ—Ç–æ–∫–æ–≤)</i>""",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=flood_mode_kb(callback.data.split("|")[1], "sms"),
        )
    elif callback.data.startswith("bomber_mode"):
        modes = {
            "classic": "üçÄ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
            "powerful": "üöß –ú–æ—â–Ω—ã–π",
            "legendary": "üî• –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
        }
        bombers = {
            "sms": "üì® SMS",
            "auto_calls": "üìû –ê–≤—Ç–æ-–ó–≤–æ–Ω–∫–∏",
            "reverse_calls": "‚òéÔ∏è –û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏",
        }
        if callback.data.split("|")[2] == "default":
            tag = "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥"
        elif callback.data.split("|")[2] == "infinity":
            tag = "‚ò†Ô∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ñ–ª—É–¥"
        work_time = {"classic": 30, "powerful": 25, "legendary": 20}
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
        keyboard.add(kb)
        work_time_text = f"{work_time[callback.data.split('|')[1]]} –º–∏–Ω—É—Ç"
        await bot.edit_message_text(
            f"<b>{tag}</b>\n‚îú –¢–∏–ø:  <code>{bombers[callback.data.split('|')[3]]}</code>\n‚îú –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:  <code>{modes[callback.data.split('|')[1]]}</code>\n‚îÇ\n‚îî –ú–∞–∫—Å. –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:  <code>{work_time_text if tag == 'ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥' else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}</code>\n\n<i>‚ùî –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)</i>",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
        await FSMMain.get_phone_bomber.set()
        async with state.proxy() as data:
            data["tag"] = tag
            data["bomber_type"] = bombers[callback.data.split("|")[3]]
            data["bomber_mode"] = modes[callback.data.split("|")[1]]
            data["work_time"] = work_time[callback.data.split("|")[1]]
            data["message_id"] = callback.message.message_id
    elif callback.data.startswith("auto_calls_bomber"):
        if callback.data.split("|")[1] == "default":
            tag = "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥"
        elif callback.data.split("|")[1] == "infinity":
            tag = "‚ò†Ô∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ñ–ª—É–¥"
        await bot.edit_message_text(
            f"""<b>{tag}</b>\n‚îî –¢–∏–ø:  <code>üìû –ê–≤—Ç–æ-–ó–≤–æ–Ω–∫–∏</code>\n\n<i>‚ùî –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª-–≤–æ –ø–æ—Ç–æ–∫–æ–≤)</i>""",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=flood_mode_kb(callback.data.split("|")[1], "auto_calls"),
        )
    elif callback.data.startswith("task_stop"):
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
        keyboard = InlineKeyboardMarkup().add(kb)
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        limits_update(callback.from_user.id, -1)
        bomber_stop(callback.data.split("|")[1], now, "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        bomber = get_bomber_stats(callback.data.split("|")[1])
        bomber_active.remove(bomber[1])
        try:
            bomber = get_bomber_stats(callback.data.split("|")[1])
            emojis = {
                "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥": "ü§¨",
                "‚ò†Ô∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ñ–ª—É–¥": "‚ò†Ô∏è",
                "–í –ø—Ä–æ—Ü–µ—Å—Å–µ": "‚åõÔ∏è",
                "üì® SMS": "üì®",
                "‚òéÔ∏è –û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏": "‚òéÔ∏è",
                "üìû –ê–≤—Ç–æ-–ó–≤–æ–Ω–∫–∏": "üìû",
                "–ó–∞–≤–µ—Ä—à–µ–Ω–æ": "‚òëÔ∏è",
                "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã": " ‚òëÔ∏è",
            }
            await bot.edit_message_text(
                f"""<b>{emojis[bomber[6]]}  #{callback.data.split('|')[1]}  {emojis[bomber[2]]}  +{bomber[1]}  {emojis[bomber[4]]}</b>
    <i>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</i>

üëÅ‚Äçüó® ID –∑–∞–¥–∞—á–∏:  <code>{callback.data.split('|')[1]}</code>
‚îú –¢–∏–ø:  <code>{bomber[2]}</code>
‚îú –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:  <code>{bomber[3]}</code>
‚îú –°—Ç–∞—Ç—É—Å:  <code>{bomber[4]}</code>
‚îú –ù–æ–º–µ—Ä:  <code>+{bomber[1]}</code>
‚îú –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:  <code>{bomber[5]} (UTC+03:00)</code>
‚îú –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:  <code>{int((datetime.datetime.strptime(now, "%d.%m.%Y %H:%M:%S") - datetime.datetime.strptime(bomber[5], "%d.%m.%Y %H:%M:%S")).seconds / 60) if bomber[10] == 'None' else int((datetime.datetime.strptime(bomber[10], "%d.%m.%Y %H:%M:%S") - datetime.datetime.strptime(bomber[5], "%d.%m.%Y %H:%M:%S")).seconds / 60)} –º–∏–Ω—É—Ç</code>
‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:  <code>{bomber[9]}</code>
‚îî –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:  <code>{bomber[7]}</code>""",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=task_kb(callback.data.split("|")[1])
                if bomber[4] == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                else keyboard,
            )
        except:
            pass
    elif callback.data.startswith("refresh_task"):
        try:
            kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
            keyboard = InlineKeyboardMarkup().add(kb)
            bomber = get_bomber_stats(callback.data.split("|")[1])
            emojis = {
                "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥": "ü§¨",
                "‚ò†Ô∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ñ–ª—É–¥": "‚ò†Ô∏è",
                "–í –ø—Ä–æ—Ü–µ—Å—Å–µ": "‚åõÔ∏è",
                "üì® SMS": "üì®",
                "‚òéÔ∏è –û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏": "‚òéÔ∏è",
                "üìû –ê–≤—Ç–æ-–ó–≤–æ–Ω–∫–∏": "üìû",
                "–ó–∞–≤–µ—Ä—à–µ–Ω–æ": "‚òëÔ∏è",
                "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã": " ‚òëÔ∏è",
            }
            now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            await bot.edit_message_text(
                f"""<b>{emojis[bomber[6]]}  #{callback.data.split('|')[1]}  {emojis[bomber[2]]}  +{bomber[1]}  {emojis[bomber[4]]}</b>
    <i>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</i>

üëÅ‚Äçüó® ID –∑–∞–¥–∞—á–∏:  <code>{callback.data.split('|')[1]}</code>
‚îú –¢–∏–ø:  <code>{bomber[2]}</code>
‚îú –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:  <code>{bomber[3]}</code>
‚îú –°—Ç–∞—Ç—É—Å:  <code>{bomber[4]}</code>
‚îú –ù–æ–º–µ—Ä:  <code>+{bomber[1]}</code>
‚îú –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:  <code>{bomber[5]} (UTC+03:00)</code>
‚îú –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:  <code>{int((datetime.datetime.strptime(now, "%d.%m.%Y %H:%M:%S") - datetime.datetime.strptime(bomber[5], "%d.%m.%Y %H:%M:%S")).seconds / 60) if bomber[10] == 'None' else int((datetime.datetime.strptime(bomber[10], "%d.%m.%Y %H:%M:%S") - datetime.datetime.strptime(bomber[5], "%d.%m.%Y %H:%M:%S")).seconds / 60)} –º–∏–Ω—É—Ç</code>
‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:  <code>{bomber[9]}</code>
‚îî –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:  <code>{bomber[7]}</code>""",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=task_kb(callback.data.split("|")[1])
                if bomber[4] == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                else keyboard,
            )
        except:
            pass

    elif callback.data == "history_flood":
        await bot.edit_message_text(
            "<b>üìù –ò—Å—Ç–æ—Ä–∏—è</b>",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=history_kb(callback.from_user.id),
        )
    elif callback.data.startswith("bomber_start"):
        user = get_profile(callback.from_user.id)
        rang = get_rang(user[5])
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
        keyboard = InlineKeyboardMarkup().add(kb)
        if user[6] >= rang[1]:
            await bot.edit_message_text(
                f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>\n\n<i>–í—Å–µ —Ç–≤–æ–∏ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã</i>",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
            await bot.answer_callback_query(callback.id)
            return
        elif user[7] >= rang[2]:
            await bot.edit_message_text(
                f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>\n\n<i>–¢—ã –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∑–∞–¥–∞—á –≤ —Å—É—Ç–∫–∏</i>",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
            await bot.answer_callback_query(callback.id)
            return
        limits_update(callback.from_user.id, 1)
        server_phones_update()
        bomber = get_bomber_start(callback.data.split("|")[1])
        bomber_active.append(bomber[4])
        bomber_start_cancel(bomber[6])
        bomber_history_insert(
            callback.from_user.id,
            bomber[4],
            bomber[2],
            bomber[3],
            "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            bomber[1],
            "-",
            callback.data.split("|")[1],
            0,
            "None",
        )
        emojis = {
            "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥": "ü§¨",
            "‚ò†Ô∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ñ–ª—É–¥": "‚ò†Ô∏è",
            "–í –ø—Ä–æ—Ü–µ—Å—Å–µ": "‚åõÔ∏è",
            "üì® SMS": "üì®",
            "‚òéÔ∏è –û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏": "‚òéÔ∏è",
            "üìû –ê–≤—Ç–æ-–ó–≤–æ–Ω–∫–∏": "üìû",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–æ": "‚òëÔ∏è",
            "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã": " ‚òëÔ∏è",
        }
        if bomber[3] == "üçÄ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π":
            _timer = 30 if bomber[6] == "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥" else 1440
            thread = threading.Thread(
                target=sms_bomber if bomber[2] == "üì® SMS" else call_bomber,
                args=(
                    callback.from_user.id,
                    callback.data.split("|")[1],
                    _timer,
                    bomber[4],
                    callback.message.message_id,
                ),
            )
            thread.start()
        elif bomber[3] == "üöß –ú–æ—â–Ω—ã–π":
            _timer = 25 if bomber[6] == "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥" else 1440
            for i in range(1, 2):
                thread = threading.Thread(
                    target=sms_bomber if bomber[2] == "üì® SMS" else call_bomber,
                    args=(
                        callback.from_user.id,
                        callback.data.split("|")[1],
                        _timer,
                        bomber[4],
                        callback.message.message_id,
                    ),
                )
                thread.start()
        elif bomber[3] == "üî• –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π":
            _timer = 20 if bomber[6] == "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥" else 1440
            for i in range(1, 3):
                thread = threading.Thread(
                    target=sms_bomber if bomber[2] == "üì® SMS" else call_bomber,
                    args=(
                        callback.from_user.id,
                        callback.data.split("|")[1],
                        _timer,
                        bomber[4],
                        callback.message.message_id,
                    ),
                )
                thread.start()
        await bot.edit_message_text(
            f"""<b>{emojis[bomber[1]]}  #{callback.data.split('|')[1]}  {emojis[bomber[2]]}  +{bomber[4]}  {emojis['–í –ø—Ä–æ—Ü–µ—Å—Å–µ']}</b>
<i>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</i>

üëÅ‚Äçüó® ID –∑–∞–¥–∞—á–∏:  <code>{callback.data.split('|')[1]}</code>
‚îú –¢–∏–ø:  <code>{bomber[2]}</code>
‚îú –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:  <code>{bomber[3]}</code>
‚îú –°—Ç–∞—Ç—É—Å:  <code>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</code>
‚îú –ù–æ–º–µ—Ä:  <code>+{bomber[4]}</code>
‚îú –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:  <code>{datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")} (UTC+03:00)</code>
‚îú –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:  <code>0 –º–∏–Ω—É—Ç</code>
‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:  <code>0</code>
‚îî –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:  <code>‚Äî</code>""",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=task_kb(callback.data.split("|")[1]),
        )
    elif callback.data.startswith("reverse_calls_bomber"):
        if callback.data.split("|")[1] == "default":
            tag = "ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥"
        elif callback.data.split("|")[1] == "infinity":
            tag = "‚ò†Ô∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ñ–ª—É–¥"
        await bot.edit_message_text(
            f"""<b>{tag}</b>\n‚îî –¢–∏–ø:  <code>‚òéÔ∏è –û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏</code>\n\n<i>‚ùî –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª-–≤–æ –ø–æ—Ç–æ–∫–æ–≤)</i>""",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=flood_mode_kb(callback.data.split("|")[1], "reverse_calls"),
        )
    elif callback.data.startswith("bomber_cancel"):
        await state.finish()
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        bomber_start_cancel(callback.data.split("|")[1])
    elif callback.data == "infinity_flood":
        user = get_profile(callback.from_user.id)
        now = datetime.datetime.now().strftime("%d.%m.%Y %S:%M:%H")
        if user[3] == "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            await callback.answer(
                "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True
            )
            await bot.answer_callback_query(callback.id)
            return
        elif datetime.datetime.strptime(
            user[3], "%d.%m.%Y %S:%M:%H"
        ) < datetime.datetime.strptime(now, "%d.%m.%Y %S:%M:%H"):
            set_default_sub(callback.from_user.id)
            await callback.answer(
                "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", show_alert=True
            )
            await bot.answer_callback_query(callback.id)
            return
        else:
            await bot.edit_message_text(
                """<b>ü§¨ –û–±—ã—á–Ω—ã–π —Ñ–ª—É–¥</b>
<i>–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ñ–ª—É–¥–∞

‚ùî –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´FAQ/–ü–æ–º–æ—â—å¬ª</i>""",
                callback.from_user.id,
                callback.message.message_id,
                reply_markup=flood_type_kb("infinity"),
                parse_mode="HTML",
            )
    elif callback.data == "close_message":
        await state.finish()
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
    elif callback.data == "sub":
        await bot.edit_message_text(
            "<b>üíµ –ü–æ–¥–ø–∏—Å–∫–∞</b>\n<i>–í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Ç–µ–±—è –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n‚ùî –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–Ω–≥–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è. –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´FAQ / –ü–æ–º–æ—â—å¬ª.</b></i>",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=buy_sub_kb(),
        )
    elif callback.data == "back":
        await state.finish()
        await send_profile(
            callback.from_user.id, "callback", callback.message.message_id
        )
    elif callback.data == "rangs":
        user = get_profile(callback.from_user.id)
        rang = get_rang(user[5])
        await bot.edit_message_text(
            f"<b>‚öúÔ∏è –†–∞–Ω–≥–∏</b>\n<i>–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–Ω–≥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–Ω–≥¬ª</i>\n\n‚Äî <code>{user[5]}</code> ‚Äî\n\nüìû –°–ª–æ—Ç–æ–≤: <code>{rang[1]} —à—Ç.</code>\n‚öôÔ∏è –°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç:  <code>{rang[2]} –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å</code>\nü§ç –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: <code>{rang[3]} –Ω–æ–º–µ—Ä–æ–≤</code>\nüí∞ –¶–µ–Ω–∞: <code>{rang[4]} ‚ÇΩ</code>"
            + "\n\n<i>‚ùóÔ∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ä–∞–Ω–≥</i>",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=rangs_choose_kb(user[5], user[5]),
        )
    elif callback.data.startswith("rang_choose"):
        rang = get_rang(callback.data.split("|")[1])
        user = get_profile(callback.from_user.id)
        if rang[0] == user[5]:
            warn_text = "\n\n<i>‚ùóÔ∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ä–∞–Ω–≥</i>"
        else:
            warn_text = ""
        try:
            await bot.edit_message_text(
                f"<b>‚öúÔ∏è –†–∞–Ω–≥–∏</b>\n<i>–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–Ω–≥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–Ω–≥¬ª</i>\n\n‚Äî <code>{callback.data.split('|')[1]}</code> ‚Äî\n\nüìû –°–ª–æ—Ç–æ–≤: <code>{rang[1]} —à—Ç.</code>\n‚öôÔ∏è –°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç:  <code>{rang[2]} –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å</code>\nü§ç –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: <code>{rang[3]} –Ω–æ–º–µ—Ä–æ–≤</code>\nüí∞ –¶–µ–Ω–∞: <code>{rang[4]} ‚ÇΩ</code>"
                + warn_text,
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=rangs_choose_kb(rang[0], user[5]),
            )
        except:
            pass
    elif callback.data == "balance_up":
        msg = await bot.edit_message_text(
            "<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n<i><u>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—É–º–º—É</u> –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</i>",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=balance_up_kb(),
            parse_mode="HTML",
        )
        await FSMMain.get_balance_up_amount.set()
        async with state.proxy() as data:
            data["message_id"] = msg.message_id
    elif callback.data.startswith("balance_up_amount"):
        await bot.edit_message_text(
            f"<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–°—É–º–º–∞:  <code>{callback.data.split('|')[1]}.00 ‚ÇΩ</code>\n\n<i>‚ùî –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=payment_system_choose(callback.data.split("|")[1]),
        )
    elif callback.data.startswith("balance_up_system"):
        amount = callback.data.split("|")[2]
        new_bill = p2p.bill(amount=amount, lifetime=30)
        bill_id = new_bill.bill_id
        pay_keyboard = create_bill(bill_id, new_bill.pay_url, amount)
        await bot.edit_message_text(
            f"<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–ö –æ–ø–ª–∞—Ç–µ:  <code>{amount}.00 ‚ÇΩ</code>\n\n<i>‚ùî –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã.–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É.</i>",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=pay_keyboard,
            parse_mode="HTML",
        )
    elif callback.data.startswith("rang_buy"):
        user = get_profile(callback.from_user.id)
        rang = get_rang(callback.data.split("|")[1])
        keyboard = InlineKeyboardMarkup(row_width=1)
        if user[2] < float(rang[4]):
            kb = InlineKeyboardButton(
                f"üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {rang[4]}‚ÇΩ",
                callback_data=f"balance_up_amount|{rang[4]}",
            )
            kb1 = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
            keyboard.add(kb, kb1)
            await bot.edit_message_text(
                f"<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n<i>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:  <code>{user[2]} ‚ÇΩ</code>",
                callback.from_user.id,
                callback.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
        else:
            await bot.edit_message_text(
                f"""<b>üíµ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>
<i>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</i>

üî• –ü–æ–∫—É–ø–∫–∞ —Ä–∞–Ω–≥–∞: <code>{rang[0]}</code>
üí∞ –°—É–º–º–∞: <code>{rang[4]} ‚ÇΩ</code>

–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:  <code>{user[2]} ‚ÇΩ</code>""",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=confirm_rang_buy(rang[0], rang[4]),
            )

    elif callback.data.startswith("buy_rang_confirm"):
        keyboard = InlineKeyboardMarkup(row_width=1)
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        keyboard.add(kb)
        set_rang(callback.from_user.id, callback.data.split("|")[1])
        balance_down(callback.from_user.id, callback.data.split("|")[2])
        await bot.edit_message_text(
            f"<b>‚öúÔ∏è –†–∞–Ω–≥–∏</b>\n<i>–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª —Ä–∞–Ω–≥ <code>{callback.data.split('|')[1]}</code></i>",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    elif callback.data.startswith("check_bill_status"):
        bill_id = callback.data.split("|")[1]
        amount = callback.data.split("|")[2]
        status = (p2p.check(bill_id=bill_id)).status
        close_kb = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")
        close_kb.add(kb)
        if status == "PAID":
            await bot.edit_message_text(
                f"<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n<i>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É <code>{amount}.00 ‚ÇΩ</code></i>",
                callback["message"]["chat"]["id"],
                callback["message"]["message_id"],
                parse_mode="HTML",
                reply_markup=close_kb,
            )
            buy_set_balance(callback.from_user.id, amount)
            user = get_profile(callback.from_user.id)
            await bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username}<code>({callback.from_user.id})</code> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <code>{amount}‚ÇΩ</code>",
            )
            if user[9] != "None":
                set_ref_balance(user[9], amount / 5)
                await bot.send_message(
                    int(user[9]),
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ <code>{amount / 5} ‚ÇΩ</code> –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.",
                    parse_mode="HTML",
                )
        elif status == "WAITING":
            await callback.answer("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
        elif status == "EXPIRED":
            await bot.edit_message_reply_markup(
                callback.from_user.id, callback.message.message_id
            )
            await callback.answer("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã")
    elif callback.data.startswith("pay_cancel"):
        bill_id = callback.data.split("|")[1]
        if bill_id != "0":
            p2p.reject(bill_id=bill_id)
        await bot.edit_message_text(
            "–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω ‚úÖ",
            callback["message"]["chat"]["id"],
            callback["message"]["message_id"],
        )
        await send_profile(
            callback.from_user.id, "message", callback.message.message_id
        )
    elif callback.data == "activate_key":
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        keyboard.add(kb)
        await bot.edit_message_text(
            "<b>üéü –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á</b>\n<i>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</i>",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        await FSMMain.get_promo.set()
        async with state.proxy() as data:
            data["message_id"] = callback.message.message_id
    elif callback.data.startswith("buy_sub_confirm"):
        user = get_profile(callback.from_user.id)
        keyboard = InlineKeyboardMarkup(row_width=1)
        if user[2] < float(callback.data.split("|")[2]):
            kb = InlineKeyboardButton(
                f"üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {callback.data.split('|')[2]}‚ÇΩ",
                callback_data=f"balance_up_amount|{callback.data.split('|')[2]}",
            )
            kb1 = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
            keyboard.add(kb, kb1)
            await bot.edit_message_text(
                f"<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n<i>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>\n\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å <code>{user[2]} ‚ÇΩ</code>",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
            keyboard.add(kb)
            if callback.data.split("|")[1] == "hour":
                sub = (datetime.datetime.now() + datetime.timedelta(hours=1)).strftime(
                    "%d.%m.%Y %S:%M:%H"
                )
                sub_text = "1 —á–∞—Å"
            else:
                subs = {
                    "day": 1,
                    "week": 7,
                    "month": 30,
                    "one_and_half_month": 90,
                    "half_year": 180,
                    "year": 365,
                }
                sub = (
                    datetime.datetime.now()
                    + datetime.timedelta(days=subs[callback.data.split("|")[1]])
                ).strftime("%d.%m.%Y %S:%M:%H")
                sub_text = f'{subs[callback.data.split("|")[1]]} –¥–Ω–µ–π'
            balance_down(callback.from_user.id, callback.data.split("|")[2])
            set_sub(callback.from_user.id, sub)
            await bot.edit_message_text(
                f"<b>üíµ –ü–æ–¥–ø–∏—Å–∫–∞</b>\n<i>–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <code>{sub_text}</code></i>",
                callback.from_user.id,
                callback.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
    elif callback.data == "reset_slots":
        reset_slots()
        await callback.message.edit_text(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–∏–ª–∏ —Å–ª–æ—Ç—ã, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞",
            reply_markup=back_admin_menu(),
        )
    elif callback.data.startswith("buy_sub"):
        user = get_profile(callback.from_user.id)
        keyboard = InlineKeyboardMarkup(row_width=1)
        if user[2] < float(callback.data.split("|")[2]):
            kb = InlineKeyboardButton(
                f"üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {callback.data.split('|')[2]}‚ÇΩ",
                callback_data=f"balance_up_amount|{callback.data.split('|')[2]}",
            )
            kb1 = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
            keyboard.add(kb, kb1)
            await bot.edit_message_text(
                f"<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n<i>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>\n\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å <code>{user[2]} ‚ÇΩ</code>",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            subs = {
                "day": 1,
                "week": 7,
                "month": 30,
                "one_and_half_month": 90,
                "half_year": 180,
                "year": 365,
            }
            if callback.data.split("|")[1] == "hour":
                sub = (datetime.datetime.now() + datetime.timedelta(hours=1)).strftime(
                    "%d.%m.%Y %S:%M:%H"
                )
                sub_text = "1 —á–∞—Å"
            else:
                subs = {
                    "day": 1,
                    "week": 7,
                    "month": 30,
                    "one_and_half_month": 90,
                    "half_year": 180,
                    "year": 365,
                }

                sub_text = (
                    f'{subs[callback.data.split("|")[1]]} –¥–Ω–µ–π'
                    if subs[callback.data.split("|")[1]] != 1
                    else f'{subs[callback.data.split("|")[1]]} –¥–µ–Ω—å'
                )
            await bot.edit_message_text(
                f"""<b>üíµ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>
<i>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</i>

üî• –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ <code>{sub_text} </code>
üí∞ –°—É–º–º–∞: <code>{callback.data.split('|')[2]} ‚ÇΩ</code>

–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:  <code>{user[2]} ‚ÇΩ</code>""",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=buy_sub_confirm(
                    callback.data.split("|")[1], callback.data.split("|")[2]
                ),
            )
    elif callback.data == "partner programm":
        user = get_profile(callback.from_user.id)
        ref = get_referals(callback.from_user.id)
        bot_me = await bot.me
        await bot.edit_message_text(
            f"<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n<i>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!</i>\n\nüîó <code>t.me/{bot_me['username']}?start={callback.from_user.id}</code>\n‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{len(ref)}</code>\n‚îú –°—Ç–∞–≤–∫–∞:  <code>20.00%</code>\n‚îî –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É:  <code>{user[10]} ‚ÇΩ</code>\n\n‚ÅâÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´FAQ/–ü–æ–º–æ—â—å¬ª",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=ref_programm_kb(),
        )
    elif callback.data == "link_shorter":
        bot_me = await bot.me
        req = requests.post(
            f"https://clck.ru/--",
            data={
                "json": "true",
                "url": f"t.me/{bot_me['username']}?start={callback.from_user.id}",
            },
        )
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        keyboard.add(kb)
        await bot.edit_message_text(
            f"<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n<i>–¢–≤–æ—è —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞</i>\n\nüîó <code>{json.loads(req.text)[0]}</code>",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    elif callback.data == "withdraw_request":
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        keyboard.add(kb)
        user = get_profile(callback.from_user.id)
        if float(withdraw_limit) > float(user[10]):
            await callback.answer(
                f"‚ö†Ô∏è   –°—É–º–º—ã –Ω–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ ( {float(user[10])} ‚ÇΩ / {float(withdraw_limit)} ‚ÇΩ )",
                show_alert=True,
            )
        else:
            msg = await bot.edit_message_text(
                f"<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n <i>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>8-800-555-3535 –∫–∏–≤–∏</code>)</i>",
                callback.from_user.id,
                callback.message.message_id,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
            await FSMMain.get_requisites.set()
            async with state.proxy() as data:
                data["message_id"] = msg.message_id
    elif callback.data.startswith("withdraw_request_user"):
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        keyboard.add(kb)
        user = get_profile(callback.from_user.id)
        if float(user[10]) < float(100):
            await bot.edit_message_text(
                f"‚ö†Ô∏è –°—É–º–º—ã –Ω–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ <code>({float(user[10])} ‚ÇΩ / {float(withdraw_limit)} ‚ÇΩ)</code>",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            await bot.edit_message_text(
                "<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n<i>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</i>",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
            ref = get_referals(callback.from_user.id)
            await bot.send_message(
                admin_id,
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{callback.from_user.username}(<code>{callback.from_user.id}</code>)\n\n–¢–µ–∫—É—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <code>{user[10]}</code>\n–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{len(ref)}</code>\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{callback.data.split('|')[1]}</code>\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <code>{datetime.datetime.today().strftime('%d.%m.%Y %H:%M:%S')}</code>",
                parse_mode="HTML",
                reply_markup=withdraw_request_confirm_kb(callback.from_user.id),
            )
    elif callback.data.startswith("withdraw_request_admin"):
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        keyboard.add(kb)
        set_ref_balance(callback.data.split("|")[1], -100)
        await bot.edit_message_text(
            f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{callback.data.split("|")[1]}</code>',
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
        await bot.send_message(
            callback.data.split("|")[1],
            f"<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫. –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
    elif callback.data.startswith("withdraw_request_cancel"):
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        keyboard.add(kb)
        await bot.edit_message_text(
            f'–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{callback.data.split("|")[1]}</code>',
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
        await bot.send_message(
            callback.data.split("|")[1],
            f"<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
    elif callback.data == "whitelist_check":
        user = get_profile(callback.from_user.id)
        rang = get_rang(user[5])
        await bot.edit_message_text(
            f"""<b>ü§ç –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</b>
<i>–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - —ç—Ç–æ —Ä–µ–µ—Å—Ç—Ä –Ω–æ–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç —Ñ–ª—É–¥–∞ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å, —Ç–æ –µ—Å—Ç—å –Ω–∞ –Ω–∏—Ö –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–ª—É–¥ SMS –∏–ª–∏ –∑–≤–æ–Ω–∫–∞–º–∏.

üìû –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤:  <code>{user[8]} –∏–∑ {rang[3]}</code>

‚ùï –£—Å–ª—É–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞.

‚ùï –ß–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Ñ–ª—É–¥ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã.</i>""",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=whitelist_kb(),
        )
    elif callback.data == "back_adm_menu":
        await state.finish()
        await bot.edit_message_text(
            "<b>admin panel</b>",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=admin_kb(),
            parse_mode="HTML",
        )
    elif callback.data == "whitelist_number_add":
        user = get_profile(callback.from_user.id)
        rang = get_rang(user[5])
        if int(user[8]) == int(rang[3]):
            await callback.answer(
                "‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –Ω–æ–º–µ—Ä–æ–≤. –£–≤–µ–ª–∏—á–∏—Ç—å —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ, –ø–æ–≤—ã—Å–∏–≤ —Å–≤–æ–π —Ä–∞–Ω–≥.",
                show_alert=True,
            )
        else:
            keyboard = InlineKeyboardMarkup()
            kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
            keyboard.add(kb)
            await bot.edit_message_text(
                """<b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä</b>
<i>–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.</i>""",
                callback.from_user.id,
                callback.message.message_id,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
            await FSMMain.get_whitelist_number.set()
            async with state.proxy() as data:
                data["message_id"] = callback.message.message_id

    elif callback.data == "back1":
        await state.finish()
        await bot.edit_message_text(
            """<b>üî• –ù–∞—á–∞—Ç—å</b>
<i>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

‚ùî –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–Ω–∏—Ü–µ –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Ñ–ª—É–¥–æ–º –µ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´FAQ/–ü–æ–º–æ—â—å¬ª</i>""",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=flood_type(),
        )
    elif callback.data == "check_number_whitelist":
        keyboard = InlineKeyboardMarkup()
        kb = InlineKeyboardButton(text="‚Ü™Ô∏è –ù–∞–∑–∞–¥", callback_data="back1")
        keyboard.add(kb)
        msg = await bot.edit_message_text(
            """<b>‚ùî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä</b>\n
<i>–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ) –∏ —è —Å–∫–∞–∂—É, –∑–∞–ø—É—Å–∫–∞–ª–∏ –ª–∏ –Ω–∞ –Ω–µ–≥–æ —Ñ–ª—É–¥ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.</i>""",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
        await FSMMain.get_check_number.set()
        async with state.proxy() as data:
            data["message_id"] = msg.message_id
    elif callback.data == "set_balance":
        await bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=back_admin_menu(),
        )
        await FMSAdmin.get_userid_set_balance.set()
        async with state.proxy() as data:
            data["message_id"] = callback.message.message_id
    elif callback.data == "watch_profile":
        await bot.edit_message_text(
            "<b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=back_admin_menu(),
            parse_mode="HTML",
        )
        await FMSAdmin.get_userid_watch_profile.set()
        async with state.proxy() as data:
            data["message_id"] = callback.message.message_id
    elif callback.data == "ban_user":
        await bot.edit_message_text(
            "<b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å</b>",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=back_admin_menu(),
            parse_mode="HTML",
        )
        await FMSAdmin.get_userid_ban.set()
        async with state.proxy() as data:
            data["message_id"] = callback.message.message_id
    elif callback.data == "unban_user":
        await bot.edit_message_text(
            "<b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å</b>",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=back_admin_menu(),
            parse_mode="HTML",
        )
        await FMSAdmin.get_userid_unban.set()
        async with state.proxy() as data:
            data["message_id"] = callback.message.message_id
    elif callback.data == "watch_subs":
        subs = get_subs()
        with open("subs.txt", "w+") as f:
            f.write(subs)
        with open("subs.txt", "rb") as f:
            await bot.send_document(
                callback.from_user.id, f, caption="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏"
            )
    elif callback.data == "mailing":
        await bot.edit_message_text(
            "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
            callback.from_user.id,
            callback.message.message_id,
            parse_mode="HTML",
            reply_markup=back_admin_menu(),
        )
        await FMSAdmin.get_mailing_text.set()
        async with state.proxy() as data:
            data["message_id"] = callback.message.message_id
    elif callback.data == "promo_generator":
        await bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —á—Ç–æ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–º–æ–∫–æ–¥—ã",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=promo_generate_choose_kb(),
        )
    elif callback.data.startswith("generate"):
        if callback.data.split("|")[1] == "sub":
            item = f'sub|{callback.data.split("|")[2]}'
        else:
            item = f'rang|{callback.data.split("|")[2]}'
        await bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=back_admin_menu(),
        )
        await FMSAdmin.get_promo_amount.set()
        async with state.proxy() as data:
            data["item"] = item
            data["message_id"] = callback.message.message_id
    await bot.answer_callback_query(callback.id)


async def timer():
    reset_limit()


async def send_message_to_user(message, user_id):
    receive_users, block_users = 0, 0
    users = get_all_users()
    for user in users:
        try:
            await bot.send_message(user[0], message, parse_mode="HTML")
            receive_users += 1
        except:
            block_users += 1
            update_status_distribution(user_id=user[0], value="inactive")
        await asyncio.sleep(0.05)
    await bot.send_message(
        user_id,
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚òë</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users} ‚úÖ</code>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users} ‚ùå</code>",
        parse_mode="HTML",
        reply_markup=back_admin_menu(),
    )


if __name__ == "__main__":
    # TIMEZONE = getenv("Asia/Novokuznetsk") or "Asia/Novokuznetsk"
    # tz = pytz.timezone(TIMEZONE)
    sched = AsyncIOScheduler()
    # sched.configure(timezone=tz)
    sched.start()
    sched.add_job(
        timer,
        "interval",
        days=3,
    )
    executor.start_polling(dp, skip_updates=True)
